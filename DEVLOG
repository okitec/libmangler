Changelog der Bibliotheksverwaltung
===================================

15 12 2015: [SERVER]
	Nachdem die Spezifikationen einigermaßen komplett waren, ging es an
	die Implementierung des Servers, den ich in Plan 9 C schreibe. Ein
	Skelett, das einfach für jeden Client forkt und das Gesendete wieder
	echot, war innerhalb einer Viertelstunde fertig.

	Als nächstes habe ich einen einfachen, temporären ad-hoc lexikalen
	Scanner geschrieben. Ging größtenteils, aber ich hatte keine Zeit
	mehr, den Bug aufzuspüren, der dazu führte, dass der Server keine
	Antwort auf irgendwas sendete.

17 12 2015: [UNICODE] [BUGFIX]
	Ich habe ein paar Prints in den wahrscheinlich fehlerhaften Codeabschnitt
	gesteckt und den Bug lokalisiert: der (sowieso suspekte und temporäre)
	Code zum Skippen vom Whitespace hat nicht funktioniert, also wurde immer
	das Kommando ' ' durchgeführt, was natürlich keine Bedeutung hatte. Simple fix.

	Im Zuge das Fixes habe ich den Code auf Unicode generalisiert. Das
	Protokoll ist UTF-8, das meiste wird nicht angetastet und kann UTF-8
	bleiben. Für den Whitespace-Check werden jedoch Runen (Plan 9 Jargon
	für Code Point) benötigt, da es potenziell mehrere nicht-ASCII
	Whitespace-Zeichen gibt. Also wird eine Rune nach der anderen aus dem
	String extrahiert.
	
	Außerdem hab ich einen noch unvollständigen Ansatz einer Grammatik,
	aus der YACC einen Parser generieren kann.

18 12 2015: [DEVLOG]
	Heute habe ich das Changelog begonnen und die zwei Einträge aus
	meiner Erinnerung geschrieben.


20 12 2015: [UUIDS UND ISBNS]
	In der data.h-Datei finden sich nun die Definitionen von User, Booktype,
	Book, Isbn und Uuid, in fns.h die Prototypen aller bisher gesketchten
	öffentlichen Routinen. Die Funktionen mkuuid, mkisbn und validisbn in
	misc.c sind jetzt auch schon implementiert, aber noch nicht getestet.
	Ich will einen Haufen ISBNs gegen diese Funktionen spammen. Dafür fehlen
	u.a. die print(2)-Hooks, damit sie durch print(2) wieder ausgegeben
	werden können.

30 12 2015: [ISBNS] [QR CODE SCANNEN]
	ISBNs werden wieder der Einfachheit halber durch einen String
	repräsentiert, in dem keine Bindestriche sind.

24 02 2016: [ECLIPSE] [FOSSIL] [PROTOKOLL]
	Aufgrund der Probleme, die ich in der Vergangenheit mit Eclipse bzw.
	Eclipse-Projekten hatte, werde ich eventuell auf die IDE verzichten.
	Es gibt Möglichkeiten, ohne eine IDE Android zu programmieren.

	Vllt. sollte ich auf nativem Plan 9 arbeiten, damit ich Fossil-
	Snapshots habe. Die Bibliotheksverwaltung sollte allerdings unter
	plan9port funktionieren.

	Ich habe das Protokoll und an der Grammatik gearbeitet. Bisher fehlt
	aber noch der Lexer. Problem ist auch, dass Parser und Lexer standardmäßig
	globalen Kontext verwenden. Es gibt aber einen Ausweg.

27 02 2016: [SDK]
	Ich habe auf meinem Computer nun endlich die Android SDK installiert.
	libmangler wird als Minimum API 15 nutzen.

	android create project \
		--target 1 \
		--name libmangler \
		--path client \
		--activity MainActivity \
		--package de.csgin.oki.libmangler

	Ant war einfach zu installieren. Es fehlt jedoch die JDK, ich hab momentan
	nur die JRE installiert.

01 03 2016: [PROTOKOLL] [WORLDCAT] [DATENBANK]
	Durch Besinnung auf die nötigen Aktionen habe ich das Protokoll
	wieder überarbeitet, sodass es alles nötige möglichst einfach macht.
	Protokoll v2 verwendet keine Regexps zur Selektion mehr. Tags fehlen
	nun auch; sie waren zur Identifizierung getrennter Requests. Da dot
	jedoch sowieso Zustand bedeutet, müssen alle Befehle nacheinander
	auseführt werden.

	Die Online-Datenbank worldcat.org bildet die weltgrößte Bibliothekssuche,
	zudem können Einträge hinzugefügt werden. Mt einem Account kann man
	MARCXML-Informationen zu einer beliebigen XML abrufen. libmangler muss
	dann nur cachen. Das wäre die richtige Lösung. Ich würde gerne von XML
	zu JSON converten.

	Die Daten zu Büchern und Copies sollte in einer Dateisystemstruktur
	gespeichert werden. Wer braucht Datenbanken?

08 03 2016: [ECLIPSE] [PORT]
	Da Android Studio in der Schule nicht funktioniert, muss ich wohl teilweise
	auf Eclipse umstellen. Am Server kann ich auch nicht arbeiten, da auf Windows
	kein Plan 9 Port existiert.

	Die Portnummer ist 40000.


24 03 2016: [APP]
	Heute, am OpenPabst-Tag 2.0, habe ich viel an der App gearbeitet. Scanning
	der QR-Codes und die UI sind soweit funktionsfähig. Ein Problem ist die
	Kommunikation mit dem Server: Android erlaubt kein Netzwerken im EDT, aber
	ich baue auf blockender IO. Tims Weg wäre es, einen AsyncTask zu erstellen
	und dann im EDT zu spinnen. Das hat nur Nachteile gegenüber Blocking und
	macht den Vorteil der Asynchronität zunichte: der EDT soll bei
	nichtblockierenden Calls weiter zeichnen.

	Ein Workaround über IntentServices wäre ziemlich meh, aber möglich. Das
	Deaktivieren der Networking-Sperre ist die pragmatische Lösung. Die App
	könnte in Go geschrieben werden, aber Go kann bisher keine UI, also wäre
	ein Java/Go-Mix nötig.

29 03 2016: [GIT] [GO] [SPEC] [SRV]
	libmangler wird ab sofort mit Git verwaltet. Ich habe gerade .gitignore
	vorbereitet.

	Des Weiteren kommt es zu einer großen Änderung. Der Server wird in Go
	geschrieben, da

	1. Ich endlich Go verwenden möchte.
	2. Go für Server wie diesen am angemessensten ist und es viel leichter
	   macht, als selbst Plan 9 C es kann. Insbesondere Garbage Collection,
	   Slices, Interfaces und Goroutines wird immens helfen.
	3. Da es auch auf Windows funktioniert, und keine Plan 9 Port-Dependency
	   mehr existiert. Insbesondere wird Go statisch kompiliert, sodass die
	   Binary als einzelne Datei alles ist, was man zum Verwenden benötigt.
	4. Die C-Version nicht weit fortgeschritten und sehr clumsy war.

	Die Binary des Servers wird manglersrv heißen.

	Die Spezifikation ist jetzt wieder komplett aktuell. Die Kommandos des
	Protokolls sind nun auch schön formatiert. Der erste Commit sollte gut
	sein.

	Ich habe ein Skelett für den Server geschrieben, der auf manche Zeichen
	mit einer bestimmten Aushabe reagiert ("What?", ...). Also ein temporärer
	Chatbot.

01 04 2016: [LEXER] [SIMPLE CMDS]
	Nach einem eher missglückten Versuch, einen angenehmen Lexer nach Rob Pikes
	Methode zu schreiben, habe ich heute die Handle-Loop verbessert und die
	simplen Kommandos v und q implementiert. Simple Commands sind diejenigen
	Befehle, die nicht mit einer Selektion arbeiten. Die Protokollversion ist
	jetzt -1, da nicht das ganze Protokoll gehandled wird.
